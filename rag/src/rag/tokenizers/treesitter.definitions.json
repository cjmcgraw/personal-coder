{
  "python": [
    "function_definition",
    "class_definition",
    "method_definition",
    "decorated_definition",
    "if_statement",
    "for_statement",
    "while_statement",
    "try_statement",
    "with_statement",
    "async_function_definition",
    "import_statement",
    "import_from_statement",
    "global_statement",
    "match_statement",
    "case_clause",
    "lambda",
    "return_statement",
    "assignment"
  ],
  
  "javascript": [
    "function_declaration",
    "class_declaration",
    "method_definition",
    "function",
    "arrow_function",
    "export_statement",
    "import_statement",
    "variable_declaration",
    "lexical_declaration",
    "assignment_expression",
    "if_statement",
    "switch_statement",
    "case_statement",
    "try_statement",
    "catch_clause",
    "finally_clause",
    "for_statement",
    "while_statement",
    "do_statement",
    "return_statement",
    "object",
    "member_expression"
  ],
  
  "typescript": [
    "function_declaration",
    "class_declaration",
    "method_definition",
    "function",
    "arrow_function",
    "export_statement",
    "import_statement",
    "variable_declaration",
    "lexical_declaration",
    "assignment_expression",
    "if_statement",
    "switch_statement",
    "case_statement",
    "try_statement",
    "catch_clause",
    "finally_clause",
    "for_statement",
    "while_statement",
    "do_statement",
    "return_statement",
    "interface_declaration",
    "type_alias_declaration",
    "enum_declaration",
    "namespace_declaration",
    "module_declaration",
    "property_signature",
    "method_signature",
    "index_signature"
  ],
  
  "jsx": [
    "function_declaration",
    "class_declaration",
    "method_definition",
    "function",
    "arrow_function",
    "export_statement",
    "import_statement",
    "variable_declaration",
    "lexical_declaration",
    "jsx_element",
    "jsx_self_closing_element",
    "jsx_fragment",
    "jsx_attribute"
  ],
  
  "tsx": [
    "function_declaration",
    "class_declaration",
    "method_definition",
    "function",
    "arrow_function",
    "export_statement",
    "import_statement",
    "variable_declaration",
    "lexical_declaration",
    "jsx_element",
    "jsx_self_closing_element",
    "jsx_fragment",
    "jsx_attribute",
    "interface_declaration",
    "type_alias_declaration",
    "enum_declaration"
  ],
  
  "java": [
    "method_declaration",
    "constructor_declaration",
    "class_declaration",
    "interface_declaration",
    "enum_declaration",
    "annotation_type_declaration",
    "package_declaration",
    "import_declaration",
    "field_declaration",
    "if_statement",
    "switch_statement",
    "case_statement",
    "for_statement",
    "while_statement",
    "do_statement",
    "try_statement",
    "catch_clause",
    "finally_clause"
  ],
  
  "c": [
    "function_definition",
    "declaration",
    "struct_specifier",
    "enum_specifier",
    "union_specifier",
    "typedef_declaration",
    "preproc_include",
    "preproc_def",
    "preproc_if",
    "preproc_ifdef",
    "if_statement",
    "switch_statement",
    "case_statement",
    "for_statement",
    "while_statement",
    "do_statement"
  ],
  
  "cpp": [
    "function_definition",
    "declaration",
    "class_specifier",
    "struct_specifier",
    "enum_specifier",
    "namespace_definition",
    "template_declaration",
    "using_declaration",
    "preproc_include",
    "preproc_def",
    "if_statement",
    "switch_statement",
    "case_statement",
    "for_statement",
    "while_statement",
    "do_statement",
    "try_statement",
    "catch_clause"
  ],
  
  "rust": [
    "function_item",
    "function_signature_item",
    "impl_item",
    "struct_item",
    "enum_item",
    "trait_item",
    "mod_item",
    "use_declaration",
    "let_declaration",
    "type_item",
    "const_item",
    "static_item",
    "macro_definition",
    "if_expression",
    "match_expression",
    "for_expression",
    "while_expression",
    "loop_expression"
  ],
  
  "go": [
    "function_declaration",
    "method_declaration",
    "import_declaration",
    "const_declaration",
    "var_declaration",
    "type_declaration",
    "struct_type",
    "interface_type",
    "if_statement",
    "for_statement",
    "switch_statement",
    "case_clause",
    "return_statement",
    "package_clause"
  ],
  
  "ruby": [
    "method",
    "singleton_method",
    "class",
    "module",
    "if",
    "elsif",
    "else",
    "unless",
    "case",
    "when",
    "while",
    "until",
    "for",
    "begin",
    "rescue",
    "ensure"
  ],
  
  "php": [
    "function_definition",
    "method_declaration",
    "class_declaration",
    "interface_declaration",
    "trait_declaration",
    "namespace_definition",
    "namespace_use_declaration",
    "if_statement",
    "foreach_statement",
    "for_statement",
    "while_statement",
    "do_statement",
    "switch_statement",
    "case_statement",
    "try_statement",
    "catch_clause",
    "finally_clause"
  ],
  
  "csharp": [
    "method_declaration",
    "constructor_declaration",
    "class_declaration",
    "interface_declaration",
    "enum_declaration",
    "namespace_declaration",
    "using_directive",
    "field_declaration",
    "property_declaration",
    "if_statement",
    "switch_statement",
    "case_switch_label",
    "for_statement",
    "foreach_statement",
    "while_statement",
    "do_statement",
    "try_statement",
    "catch_clause",
    "finally_clause"
  ],
  
  "bash": [
    "function_definition",
    "if_statement",
    "case_statement",
    "case_item",
    "while_statement",
    "for_statement",
    "until_statement",
    "variable_assignment",
    "command",
    "pipeline",
    "list",
    "subshell",
    "here_document"
  ],
  
  "html": [
    "element",
    "script_element",
    "style_element",
    "doctype",
    "comment",
    "self_closing_tag"
  ],
  
  "css": [
    "stylesheet",
    "rule_set",
    "declaration",
    "keyframes_rule",
    "media_rule",
    "supports_rule",
    "charset_rule",
    "import_rule",
    "namespace_rule",
    "page_rule",
    "font_face_rule",
    "at_rule",
    "selector",
    "class_selector",
    "id_selector",
    "pseudo_class_selector",
    "pseudo_element_selector"
  ],
  
  "scss": [
    "stylesheet",
    "rule_set",
    "declaration",
    "keyframes_rule",
    "media_rule",
    "supports_rule",
    "charset_rule",
    "import_rule",
    "namespace_rule",
    "page_rule",
    "variable_declaration",
    "mixin_statement",
    "include_statement",
    "function_statement",
    "for_statement",
    "each_statement",
    "while_statement",
    "if_statement"
  ],
  
  "json": [
    "object",
    "array",
    "pair",
    "string",
    "number",
    "true",
    "false",
    "null"
  ],
  
  "yaml": [
    "block_mapping_pair",
    "block_sequence_item",
    "block_mapping",
    "block_sequence",
    "flow_mapping",
    "flow_sequence",
    "flow_node",
    "flow_pair",
    "document"
  ],
  
  "markdown": [
    "heading",
    "paragraph",
    "block_quote",
    "list",
    "list_item",
    "code_block",
    "html_block",
    "thematic_break",
    "link_reference_definition",
    "table",
    "table_header",
    "table_row",
    "table_cell"
  ],
  
  "swift": [
    "function_declaration",
    "class_declaration",
    "struct_declaration",
    "enum_declaration",
    "protocol_declaration",
    "extension_declaration",
    "property_declaration",
    "method_declaration",
    "import_declaration",
    "if_statement",
    "switch_statement",
    "case_statement",
    "for_statement",
    "while_statement",
    "do_statement",
    "guard_statement"
  ],
  
  "kotlin": [
    "function_declaration",
    "class_declaration",
    "object_declaration",
    "property_declaration",
    "interface_declaration",
    "enum_class",
    "import_directive",
    "package_directive",
    "if_expression",
    "when_expression",
    "while_statement",
    "do_while_statement",
    "for_statement",
    "try_expression",
    "catch_block",
    "finally_block"
  ],
  
  "haskell": [
    "module_declaration",
    "import_declaration",
    "type_declaration",
    "data_declaration",
    "newtype_declaration",
    "class_declaration",
    "instance_declaration",
    "function_declaration",
    "where_clause",
    "case_expression",
    "if_expression",
    "let_expression"
  ],
  
  "lua": [
    "function_declaration",
    "function_definition",
    "local_function",
    "local_declaration",
    "assignment_statement",
    "do_statement",
    "while_statement",
    "repeat_statement",
    "if_statement",
    "for_statement",
    "for_in_statement",
    "return_statement",
    "table_constructor"
  ],
  
  "dart": [
    "class_definition",
    "mixin_definition",
    "extension_definition",
    "method_definition",
    "getter_signature",
    "setter_signature",
    "function_signature",
    "constructor_signature",
    "variable_declaration",
    "import_directive",
    "if_statement",
    "switch_statement",
    "case_clause",
    "for_statement",
    "while_statement",
    "do_statement",
    "try_statement"
  ],
  
  "dockerfile": [
    "from_instruction",
    "run_instruction",
    "cmd_instruction",
    "label_instruction",
    "maintainer_instruction",
    "expose_instruction",
    "env_instruction",
    "add_instruction",
    "copy_instruction",
    "entrypoint_instruction",
    "volume_instruction",
    "user_instruction",
    "workdir_instruction",
    "arg_instruction"
  ],
  
  "sql": [
    "select_statement",
    "insert_statement",
    "update_statement",
    "delete_statement",
    "create_table_statement",
    "alter_table_statement",
    "drop_statement",
    "create_view_statement",
    "create_index_statement",
    "grant_statement",
    "revoke_statement"
  ],
  
  "xml": [
    "element",
    "start_tag",
    "end_tag",
    "empty_element",
    "attribute",
    "comment",
    "processing_instruction",
    "cdata_section",
    "doctype",
    "entity_declaration"
  ],
  
  "perl": [
    "function_definition",
    "block",
    "package_statement",
    "use_statement",
    "require_statement",
    "if_statement",
    "unless_statement",
    "elsif_statement",
    "else_statement",
    "while_statement",
    "until_statement",
    "for_statement",
    "foreach_statement"
  ],
  
  "r": [
    "function_definition",
    "assignment",
    "if_statement",
    "for_statement",
    "while_statement",
    "repeat_statement",
    "library_statement",
    "source_statement"
  ],
  
  "scala": [
    "class_definition",
    "object_definition",
    "trait_definition",
    "function_definition",
    "val_definition",
    "var_definition",
    "package_clause",
    "import_declaration",
    "if_expression",
    "match_expression",
    "case_clause",
    "for_expression",
    "while_expression",
    "do_expression",
    "try_expression",
    "catch_clause",
    "finally_clause"
  ],
  
  "clojure": [
    "list_lit",
    "vector_lit",
    "map_lit",
    "set_lit",
    "def",
    "defn",
    "fn",
    "let",
    "if",
    "cond",
    "case",
    "for",
    "doseq",
    "loop",
    "recur",
    "ns",
    "require",
    "import"
  ],
  
  "elixir": [
    "function_definition",
    "anonymous_function",
    "module_definition",
    "module_attribute",
    "import",
    "alias",
    "require",
    "use",
    "if_expression",
    "case_expression",
    "cond_expression",
    "for_expression",
    "try_expression",
    "rescue_expression",
    "catch_expression",
    "after_expression"
  ],
  
  "erlang": [
    "function_clause",
    "attribute",
    "module_attribute",
    "export_attribute",
    "import_attribute",
    "record_definition",
    "record_field",
    "case_expression",
    "if_expression",
    "fun_expression",
    "try_expression",
    "catch_expression",
    "after_expression"
  ],
  
  "groovy": [
    "method_declaration",
    "constructor_declaration",
    "class_declaration",
    "interface_declaration",
    "enum_declaration",
    "trait_declaration",
    "import_declaration",
    "package_declaration",
    "field_declaration",
    "variable_declaration",
    "if_statement",
    "switch_statement",
    "for_statement",
    "while_statement",
    "try_statement",
    "catch_statement",
    "finally_statement",
    "closure"
  ],
  
  "ocaml": [
    "module_definition",
    "module_type_definition",
    "let_definition",
    "type_definition",
    "function_definition",
    "value_definition",
    "class_definition",
    "method_definition",
    "match_expression",
    "if_expression",
    "try_expression",
    "for_expression",
    "while_expression",
    "open_statement"
  ],
  
  "scheme": [
    "define",
    "define_syntax",
    "lambda",
    "if_expression",
    "cond_expression",
    "case_expression",
    "let_expression",
    "let_star_expression",
    "letrec_expression",
    "do_expression",
    "begin_expression",
    "import_declaration",
    "library_declaration",
    "export_declaration"
  ],
  
  "toml": [
    "pair",
    "table",
    "array_table",
    "array",
    "inline_table",
    "string",
    "integer",
    "float",
    "boolean",
    "date_time"
  ],
  
  "terraform": [
    "block",
    "attribute",
    "variable",
    "provider_block",
    "resource_block",
    "data_block",
    "locals_block",
    "module_block",
    "output_block"
  ],
  
  "vim": [
    "function_definition",
    "command_definition",
    "autocmd_definition",
    "if_statement",
    "for_statement",
    "while_statement",
    "try_statement",
    "catch_statement",
    "finally_statement",
    "augroup_statement",
    "let_statement",
    "call_expression"
  ],
  
  "zig": [
    "function_declaration",
    "struct_declaration",
    "enum_declaration",
    "union_declaration",
    "const_declaration",
    "var_declaration",
    "if_statement",
    "switch_statement",
    "while_statement",
    "for_statement",
    "block",
    "return_statement",
    "defer_statement",
    "errdefer_statement",
    "comptime_statement",
    "test_declaration"
  ],
  
  "make": [
    "rule",
    "recipe",
    "variable_assignment",
    "conditional",
    "include_directive",
    "shell_command"
  ],
  
  "cmake": [
    "command_invocation",
    "if_command",
    "elseif_command",
    "else_command",
    "endif_command",
    "foreach_command",
    "endforeach_command",
    "while_command",
    "endwhile_command",
    "function_command",
    "endfunction_command",
    "macro_command",
    "endmacro_command",
    "include_command",
    "project_command",
    "add_executable_command",
    "add_library_command"
  ],
  
  "hcl": [
    "block",
    "attribute",
    "object",
    "tuple",
    "heredoc",
    "function_call",
    "conditional"
  ],
  
  "nix": [
    "binding",
    "attrset",
    "list",
    "function",
    "if_expression",
    "with_expression",
    "let_expression",
    "inherit_expression",
    "import_expression"
  ],
  
  "protobuf": [
    "syntax",
    "import",
    "package",
    "option",
    "message",
    "field",
    "enum",
    "enum_value",
    "service",
    "rpc",
    "extend",
    "oneof"
  ],
  
  "vue": [
    "component",
    "template_element",
    "script_element",
    "style_element",
    "element",
    "function_declaration",
    "method_definition",
    "component_declaration",
    "directive_attribute",
    "export_default",
    "setup_function"
  ],
  
  "svelte": [
    "element",
    "component",
    "script_element",
    "style_element",
    "if_block",
    "else_block",
    "each_block",
    "await_block",
    "then_block",
    "catch_block",
    "directive",
    "attribute",
    "function_declaration",
    "let_declaration",
    "export_declaration"
  ],
  
  "graphql": [
    "operation_definition",
    "fragment_definition",
    "selection_set",
    "field",
    "argument",
    "object_value",
    "object_field",
    "list_value",
    "variable_definition",
    "named_type",
    "directive"
  ],
  
  "powershell": [
    "function_definition",
    "parameter",
    "command_parameter",
    "if_statement",
    "elseif_clause",
    "else_clause",
    "switch_statement",
    "switch_clause",
    "for_statement",
    "foreach_statement",
    "while_statement",
    "do_statement",
    "try_statement",
    "catch_clause",
    "finally_clause",
    "pipeline"
  ],
  
  "default": [
    "function",
    "function_definition",
    "function_declaration",
    "method",
    "method_definition",
    "method_declaration",
    "class",
    "class_definition",
    "class_declaration",
    "module",
    "module_definition",
    "procedure",
    "subroutine",
    "rule",
    "block",
    "statement",
    "declaration",
    "if_statement",
    "for_statement",
    "while_statement",
    "switch_statement",
    "case",
    "object",
    "struct",
    "interface",
    "enum",
    "namespace",
    "package",
    "import"
  ]
}